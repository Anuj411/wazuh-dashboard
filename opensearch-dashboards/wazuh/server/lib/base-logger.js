"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BaseLogger = void 0;

var _winston = _interopRequireDefault(require("winston"));

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _getConfiguration = require("./get-configuration");

var _filesystem = require("./filesystem");

var _constants = require("../../common/constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class BaseLogger {
  constructor(plainLogsFile, rawLogsFile) {
    _defineProperty(this, "allowed", false);

    _defineProperty(this, "wazuhLogger", undefined);

    _defineProperty(this, "wazuhPlainLogger", undefined);

    _defineProperty(this, "PLAIN_LOGS_PATH", '');

    _defineProperty(this, "PLAIN_LOGS_FILE_NAME", '');

    _defineProperty(this, "RAW_LOGS_PATH", '');

    _defineProperty(this, "RAW_LOGS_FILE_NAME", '');

    _defineProperty(this, "initLogger", () => {
      const configurationFile = (0, _getConfiguration.getConfiguration)();
      const level = typeof (configurationFile || {})['logs.level'] !== 'undefined' && ['info', 'debug'].includes(configurationFile['logs.level']) ? configurationFile['logs.level'] : 'info'; // JSON logger

      this.wazuhLogger = _winston.default.createLogger({
        level,
        format: _winston.default.format.json(),
        transports: [new _winston.default.transports.File({
          filename: this.RAW_LOGS_PATH
        })]
      }); // Prevents from exit on error related to the logger.

      this.wazuhLogger.exitOnError = false; // Plain text logger

      this.wazuhPlainLogger = _winston.default.createLogger({
        level,
        format: _winston.default.format.simple(),
        transports: [new _winston.default.transports.File({
          filename: this.PLAIN_LOGS_PATH
        })]
      }); // Prevents from exit on error related to the logger.

      this.wazuhPlainLogger.exitOnError = false;
    });

    _defineProperty(this, "initDirectory", async () => {
      try {
        (0, _filesystem.createDataDirectoryIfNotExists)();
        (0, _filesystem.createDataDirectoryIfNotExists)('logs');

        if (typeof this.wazuhLogger === 'undefined' || typeof this.wazuhPlainLogger === 'undefined') {
          this.initLogger();
        }

        this.allowed = true;
        return;
      } catch (error) {
        this.allowed = false;
        return Promise.reject(error);
      }
    });

    _defineProperty(this, "getFilesizeInMegaBytes", filename => {
      if (this.allowed) {
        if (_fs.default.existsSync(filename)) {
          const stats = _fs.default.statSync(filename);

          const fileSizeInMegaBytes = stats.size;
          return fileSizeInMegaBytes / 1000000.0;
        }
      }

      return 0;
    });

    _defineProperty(this, "checkFileExist", filename => {
      return _fs.default.existsSync(filename);
    });

    _defineProperty(this, "rotateFiles", (file, pathFile, log) => {
      if (this.getFilesizeInMegaBytes(pathFile) >= _constants.MAX_MB_LOG_FILES) {
        const fileExtension = _path.default.extname(file);

        const fileName = _path.default.basename(file, fileExtension);

        _fs.default.renameSync(pathFile, `${_constants.WAZUH_DATA_LOGS_DIRECTORY_PATH}/${fileName}-${new Date().getTime()}${fileExtension}`);

        if (log) {
          _fs.default.writeFileSync(pathFile, log + '\n');
        }
      }
    });

    _defineProperty(this, "checkFiles", () => {
      (0, _filesystem.createLogFileIfNotExists)(this.RAW_LOGS_PATH);
      (0, _filesystem.createLogFileIfNotExists)(this.PLAIN_LOGS_PATH);

      if (this.allowed) {
        // check raw log file
        this.rotateFiles(this.RAW_LOGS_FILE_NAME, this.RAW_LOGS_PATH, JSON.stringify({
          date: new Date(),
          level: 'info',
          location: 'logger',
          message: 'Rotated log file'
        })); // check log file

        this.rotateFiles(this.PLAIN_LOGS_FILE_NAME, this.PLAIN_LOGS_PATH);
      }
    });

    _defineProperty(this, "yyyymmdd", () => {
      const now = new Date();
      const y = now.getFullYear();
      const m = now.getMonth() + 1;
      const d = now.getDate();
      const seconds = now.getSeconds();
      const minutes = now.getMinutes();
      const hour = now.getHours();
      return `${y}/${m < 10 ? '0' : ''}${m}/${d < 10 ? '0' : ''}${d} ${hour}:${minutes}:${seconds}`;
    });

    _defineProperty(this, "parseData", data => {
      let parsedData = data instanceof Error ? {
        message: data.message,
        stack: data.stack
      } : data; // when error is AxiosError, it extends from Error

      if (data.isAxiosError) {
        const {
          config
        } = data;
        parsedData = { ...parsedData,
          config: {
            url: config.url,
            method: config.method,
            data: config.data,
            params: config.params
          }
        };
      }

      if (typeof parsedData === 'object') parsedData.toString = () => JSON.stringify(parsedData);
      return parsedData;
    });

    this.PLAIN_LOGS_PATH = _path.default.join(_constants.WAZUH_DATA_LOGS_DIRECTORY_PATH, plainLogsFile);
    this.RAW_LOGS_PATH = _path.default.join(_constants.WAZUH_DATA_LOGS_DIRECTORY_PATH, rawLogsFile);
    this.PLAIN_LOGS_FILE_NAME = plainLogsFile;
    this.RAW_LOGS_FILE_NAME = rawLogsFile;
  }
  /**
   * Initialize loggers, plain and raw logger
   */


  /**
   * Main function to add a new log
   * @param {*} location File where the log is being thrown
   * @param {*} data Message or object to log
   * @param {*} level Optional, default is 'error'
   */
  async log(location, data, level) {
    const parsedData = this.parseData(data);
    return this.initDirectory().then(() => {
      if (this.allowed) {
        this.checkFiles();
        const plainLogData = {
          level: level || 'error',
          message: `${this.yyyymmdd()}: ${location || 'Unknown origin'}: ${parsedData.toString() || 'An error occurred'}`
        };
        this.wazuhPlainLogger.log(plainLogData);
        const logData = {
          date: new Date(),
          level: level || 'error',
          location: location || 'Unknown origin',
          data: parsedData || 'An error occurred'
        };

        if (typeof data == 'string') {
          logData.message = parsedData;
          delete logData.data;
        }

        this.wazuhLogger.log(logData);
      }
    }).catch(error => {
      console.error(`Cannot create the logs directory due to:\n${error.message || error}`);
      throw error;
    });
  }

}

exports.BaseLogger = BaseLogger;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,